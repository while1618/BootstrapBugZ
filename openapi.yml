openapi: 3.0.3
info:
  title: BootstrapBugZ
  description: Description
  termsOfService: https://github.com/while1618
  contact:
    email: dejan.zdravkovic96@gmail.com
  license:
    name: MIT License
    url: https://choosealicense.com/licenses/mit/
  version: 1.0.0
servers:
  - url: http://localhost:8181/v1
  - url: https://localhost:8181/v1
tags:
  - name: auth
    description: Auth Endpoints
  - name: user
    description: User Endpoints
  - name: profile
    description: Profile Endpoints
  - name: admin
    description: Admin Endpoints
paths:
  /auth/sign-up:
    post:
      tags:
        - auth
      summary: Sign Up
      operationId: signUp
      x-codegen-request-body-name: body
      requestBody:
        description: Sign Up Request
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpRequest'
            examples:
              valid:
                value:
                  firstName: John
                  lastName: Doe
                  username: john
                  email: john.doe@localhost.com
                  password: qwerty123
                  confirmPassword: qwerty123
              bad-request:
                value:
                  firstName: John
                  lastName: Doe
                  username: john
                  email: john
                  password: 123qwerty
                  confirmPassword: qwerty123
      responses:
        201:
          description: Sign Up Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
              example:
                id: 1
                firstName: John
                lastName: Doe
                username: john
                email: john.doe@localhost.com
                activated: false
                nonLocked: true
                roles:
                  - name: USER
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: 18-10-2021 04:00:44
                status: 400
                error: Bad Request
                errors:
                  - domain: email
                    message: Invalid email.
                  - domain: password
                    message: Passwords do not match.
  /auth/confirm-registration:
    put:
      tags:
        - auth
      summary: Confirm Registration
      operationId: confirmRegistration
      x-codegen-request-body-name: body
      requestBody:
        description: Confirm Registration Request
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfirmRegistrationRequest'
            examples:
              valid:
                value:
                  accessToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
              bad-request:
                value:
                  accessToken: null
              forbidden:
                value:
                  accessToken: invalidToken
      responses:
        204:
          description: Confirm Registration Success
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: 18-10-2021 04:00:44
                status: 400
                error: Bad Request
                errors:
                  - domain: accessToken
                    message: Invalid token.
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: 18-10-2021 04:00:44
                status: 403
                error: Forbidden
                errors:
                  - domain: auth
                    message: Invalid token.
  /auth/resend-confirmation-email:
    post:
      tags:
        - auth
      summary: Resend Confirmation Email
      operationId: resendConfirmationEmail
      x-codegen-request-body-name: body
      requestBody:
        description: Resend Confirmation Email Request
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResendConfirmationEmailRequest'
            examples:
              valid:
                value:
                  usernameOrEmail: john.doe@localhost.com
              bad-request:
                value:
                  usernameOrEmail: null
              forbidden:
                value:
                  usernameOrEmail: user
              not-found:
                value:
                  usernameOrEmail: unknown
      responses:
        204:
          description: Resend Confirmation Email Success
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: 18-10-2021 04:00:44
                status: 400
                error: Bad Request
                errors:
                  - domain: usernameOrEmail
                    message: Invalid username or email.
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: 18-10-2021 04:00:44
                status: 403
                error: Forbidden
                errors:
                  - domain: auth
                    message: User already activated.
        404:
          description: User Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: 18-10-2021 04:00:44
                status: 404
                error: Not Found
                errors:
                  - domain: auth
                    message: User not found.
  /auth/sign-in:
    post:
      tags:
        - auth
      summary: Sign In
      operationId: signIn
      x-codegen-request-body-name: body
      requestBody:
        description: Sign In Request
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignInRequest'
            examples:
              valid:
                value:
                  usernameOrEmail: john.doe@localhost.com
                  password: qwerty123
              bad-request:
                value:
                  usernameOrEmail: null
                  password: null
              unauthorized:
                value:
                  usernameOrEmail: john.doe@localhost.com
                  password: 123qwerty
      responses:
        200:
          description: Sign In Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignInResponse'
              example:
                accessToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                refreshToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5b
                user:
                  id: 1
                  firstName: John
                  lastName: Doe
                  username: john
                  email: john.doe@localhost.com
                  activated: false
                  nonLocked: true
                  roles:
                    - name: USER
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: 18-10-2021 04:00:44
                status: 400
                error: Bad Request
                errors:
                  - domain: usernameOrEmail
                    message: Invalid username or email.
                  - domain: password
                    message: Invalid password.
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: 18-10-2021 04:00:44
                status: 401
                error: Unauthorized
                errors:
                  - domain: auth
                    message: Invalid credentials.
  /auth/refresh-token:
    post:
      tags:
        - auth
      summary: Refresh Token
      operationId: refreshToken
      x-codegen-request-body-name: body
      requestBody:
        description: Refresh Token Request
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
            examples:
              valid:
                value:
                  refreshToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5b
              bad-request:
                value:
                  refreshToken: null
              unauthorized:
                value:
                  refreshToken: invalidToken
      responses:
        200:
          description: Refresh Token Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshTokenResponse'
              example:
                accessToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                refreshToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5b
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: 18-10-2021 04:00:44
                status: 400
                error: Bad Request
                errors:
                  - domain: refreshToken
                    message: Invalid token.
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: 18-10-2021 04:00:44
                status: 401
                error: Unauthorized
                errors:
                  - domain: auth
                    message: Invalid token.
  /auth/sign-out:
    post:
      tags:
        - auth
      summary: Sign Out
      operationId: signOut
      x-codegen-request-body-name: body
      security:
        - BearerAuth: []
      responses:
        204:
          description: Sign Out Success
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: 18-10-2021 04:00:44
                status: 401
                error: Unauthorized
                errors:
                  - domain: auth
                    message: Unauthorized.
  /auth/sign-out-from-all-devices:
    post:
      tags:
        - auth
      summary: Sign Out From All Devices
      operationId: signOutFromAllDevices
      x-codegen-request-body-name: body
      security:
        - BearerAuth: []
      responses:
        204:
          description: Sign Out From All Devices Success
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: 18-10-2021 04:00:44
                status: 401
                error: Unauthorized
                errors:
                  - domain: auth
                    message: Unauthorized.
  /auth/forgot-password:
    post:
      tags:
        - auth
      summary: Forgot Password
      operationId: forgotPassword
      x-codegen-request-body-name: body
      requestBody:
        description: Forgot Password Request
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPasswordRequest'
            examples:
              valid:
                value:
                  email: john.doe@localhost.com
              bad-request:
                value:
                  email: null
              not-found:
                value:
                  email: unknown@localhost.com
      responses:
        204:
          description: Forgot Password Success
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: 18-10-2021 04:00:44
                status: 400
                error: Bad Request
                errors:
                  - domain: email
                    message: Invalid email.
        404:
          description: User Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: 18-10-2021 04:00:44
                status: 404
                error: Not Found
                errors:
                  - domain: auth
                    message: User not found.
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: 18-10-2021 04:00:44
                status: 403
                error: Forbidden
                errors:
                  - domain: auth
                    message: Invalid token.
  /auth/reset-password:
    put:
      tags:
        - auth
      summary: Reset Password
      operationId: resetPassword
      x-codegen-request-body-name: body
      requestBody:
        description: Reset Password Request
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
            examples:
              valid:
                value:
                  accessToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                  password: qwerty321
                  confirmPassword: qwerty321
              bad-request:
                value:
                  accessToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                  password: qwerty321
                  confirmPassword: 321qwerty
              forbidden:
                value:
                  accessToken: invalidToken
                  password: qwerty321
                  confirmPassword: qwerty321
      responses:
        204:
          description: Reset Password Success
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: 18-10-2021 04:00:44
                status: 400
                error: Bad Request
                errors:
                  - domain: password
                    message: Passwords do not match.
  /auth/signed-in-user:
    get:
      tags:
        - auth
      summary: Signed In User
      operationId: signedInUser
      security:
        - BearerAuth: []
      responses:
        200:
          description: Signed In User Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
              example:
                id: 1
                firstName: John
                lastName: Doe
                username: john
                email: john.doe@localhost.com
                activated: false
                nonLocked: true
                roles:
                  - name: USER
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: 18-10-2021 04:00:44
                status: 401
                error: Unauthorized
                errors:
                  - domain: auth
                    message: Unauthorized.
  /auth/username-availability:
    get:
      tags:
        - auth
      summary: Username Availability
      operationId: usernameAvailability
      parameters:
        - in: query
          name: username
          required: true
          schema:
            type: string
          description: Pass username to check if it's available.
          example: john
      responses:
        200:
          description: Username Availability Success
          content:
            application/json:
              schema:
                type: boolean
              examples:
                username-available:
                  value: true
                username-taken:
                  value: false
  /auth/email-availability:
    get:
      tags:
        - auth
      summary: Email Availability
      operationId: emailAvailability
      parameters:
        - in: query
          name: email
          required: true
          schema:
            type: string
          description: Pass email to check if it's available.
          example: john.doe@localhost.com
      responses:
        200:
          description: Email Availability Success
          content:
            application/json:
              schema:
                type: boolean
              examples:
                email-available:
                  value: true
                email-taken:
                  value: false
  /users:
    get:
      tags:
        - user
      summary: Get Users
      operationId: getUsers
      security:
        - {}
        - BearerAuth: []
      responses:
        200:
          description: Get Users Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
              examples:
                non-signed-in-and-regular-user:
                  value: 
                    - id: 1
                      firstName: John
                      lastName: Doe
                      username: john
                      email: null
                      activated: false
                      nonLocked: true
                      roles: null
                    - id: 2
                      firstName: Jane
                      lastName: Doe
                      username: jane
                      email: null
                      activated: false
                      nonLocked: true
                      roles: null
                admin:
                  value: 
                    - id: 1
                      firstName: John
                      lastName: Doe
                      username: john
                      email: john.doe@localhost.com
                      activated: false
                      nonLocked: true
                      roles:
                        - name: USER
                    - id: 2
                      firstName: Jane
                      lastName: Doe
                      username: jane
                      email: jane.doe@localhost.com
                      activated: false
                      nonLocked: true
                      roles:
                        - name: USER
  /users/{username}:
    get:
      tags:
        - user
      summary: Get User
      operationId: getUser
      security:
        - {}
        - BearerAuth: []
      parameters:
        - in: path
          name: username
          required: true
          schema:
            type: string
          description: Pass username to get user.
          example: john
      responses:
        200:
          description: Get User Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
              examples:
                requesting-signed-in-user:
                  value:
                    id: 1
                    firstName: John
                    lastName: Doe
                    username: john
                    email: john.doe@localhost.com
                    activated: false
                    nonLocked: true
                    roles: null 
                requesting-other-user:
                  value:
                    id: 1
                    firstName: John
                    lastName: Doe
                    username: john
                    email: null
                    activated: false
                    nonLocked: true
                    roles: null
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: 18-10-2021 04:00:44
                status: 401
                error: Unauthorized
                errors:
                  - domain: auth
                    message: Unauthorized.
        404:
          description: User Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: 18-10-2021 04:00:44
                status: 404
                error: Not Found
                errors:
                  - domain: user
                    message: User not found.
  /profile/update:
    put:
      tags:
        - profile
      summary: Update Profile
      operationId: updateProfile
      x-codegen-request-body-name: body
      security:
        - BearerAuth: []
      requestBody:
        description: Update Profile Request
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
            examples:
              valid:
                value:
                  firstName: Jane
                  lastName: Doe
                  username: jane
                  email: jane.doe@localhost.com
              bad-request:
                value:
                  firstName: John
                  lastName: Doe
                  username: john
                  email: john
      responses:
        200:
          description: Update Profile Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
              example:
                id: 1
                firstName: Jane
                lastName: Doe
                username: jane
                email: jane.doe@localhost.com
                activated: false
                nonLocked: true
                roles:
                  - name: USER
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: 18-10-2021 04:00:44
                status: 400
                error: Bad Request
                errors:
                  - domain: email
                    message: Invalid email.
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: 18-10-2021 04:00:44
                status: 401
                error: Unauthorized
                errors:
                  - domain: auth
                    message: Unauthorized.
  /profile/change-password:
    put:
      tags:
        - profile
      summary: Change Password
      operationId: changePassword
      x-codegen-request-body-name: body
      security:
        - BearerAuth: []
      requestBody:
        description: Change Password Request
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
            examples:
              valid:
                value:
                  oldPassword: qwerty123
                  newPassword: qwerty321
                  confirmNewPassword: qwerty321
              bad-request:
                value:
                  oldPassword: qwerty123
                  newPassword: qwerty321
                  confirmNewPassword: qwerty3214
      responses:
        204:
          description: Change Password Success
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: 18-10-2021 04:00:44
                status: 400
                error: Bad Request
                errors:
                  - domain: password
                    message: Passwords do not match.
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: 18-10-2021 04:00:44
                status: 401
                error: Unauthorized
                errors:
                  - domain: auth
                    message: Unauthorized.
  /admin/users/activate:
    put:
      tags:
        - admin
      summary: Activate Users
      operationId: activateUsers
      x-codegen-request-body-name: body
      security:
        - BearerAuth: []
      requestBody:
        description: Activate Users Request
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminRequest'
            examples:
              valid:
                value:
                  usernames:
                    - john
                    - jean
              bad-request:
                value:
                  usernames: null
      responses:
        204:
          description: Activate Users Success
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: 18-10-2021 04:00:44
                status: 400
                error: Bad Request
                errors:
                  - domain: usernames
                    message: Usernames not provided.
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: 18-10-2021 04:00:44
                status: 401
                error: Unauthorized
                errors:
                  - domain: auth
                    message: Unauthorized.
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: 18-10-2021 04:00:44
                status: 403
                error: Forbidden
                errors:
                  - domain: auth
                    message: Forbidden.
  /admin/users/deactivate:
    put:
      tags:
        - admin
      summary: Deactivate Users
      operationId: deactivateUsers
      x-codegen-request-body-name: body
      security:
        - BearerAuth: []
      requestBody:
        description: Deactivate Users Request
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminRequest'
            examples:
              valid:
                value:
                  usernames:
                    - john
                    - jean
              bad-request:
                value:
                  usernames: null
      responses:
        204:
          description: Deactivate Users Success
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: 18-10-2021 04:00:44
                status: 400
                error: Bad Request
                errors:
                  - domain: usernames
                    message: Usernames not provided.
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: 18-10-2021 04:00:44
                status: 401
                error: Unauthorized
                errors:
                  - domain: auth
                    message: Unauthorized.
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: 18-10-2021 04:00:44
                status: 403
                error: Forbidden
                errors:
                  - domain: auth
                    message: Forbidden.
  /admin/users/unlock:
    put:
      tags:
        - admin
      summary: Unlock Users
      operationId: unlockUsers
      x-codegen-request-body-name: body
      security:
        - BearerAuth: []
      requestBody:
        description: Unlock Users Request
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminRequest'
            examples:
              valid:
                value:
                  usernames:
                    - john
                    - jean
              bad-request:
                value:
                  usernames: null
      responses:
        204:
          description: Unlock Users Success
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: 18-10-2021 04:00:44
                status: 400
                error: Bad Request
                errors:
                  - domain: usernames
                    message: Usernames not provided.
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: 18-10-2021 04:00:44
                status: 401
                error: Unauthorized
                errors:
                  - domain: auth
                    message: Unauthorized.
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: 18-10-2021 04:00:44
                status: 403
                error: Forbidden
                errors:
                  - domain: auth
                    message: Forbidden.
  /admin/users/lock:
    put:
      tags:
        - admin
      summary: Lock Users
      operationId: lockUsers
      x-codegen-request-body-name: body
      security:
        - BearerAuth: []
      requestBody:
        description: Lock Users Request
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminRequest'
            examples:
              valid:
                value:
                  usernames:
                    - john
                    - jean
              bad-request:
                value:
                  usernames: null
      responses:
        204:
          description: Lock Users Success
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: 18-10-2021 04:00:44
                status: 400
                error: Bad Request
                errors:
                  - domain: usernames
                    message: Usernames not provided.
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: 18-10-2021 04:00:44
                status: 401
                error: Unauthorized
                errors:
                  - domain: auth
                    message: Unauthorized.
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: 18-10-2021 04:00:44
                status: 403
                error: Forbidden
                errors:
                  - domain: auth
                    message: Forbidden.
  /admin/users/update-role:
    put:
      tags:
        - admin
      summary: Update Users Roles
      operationId: updateUserRoles
      x-codegen-request-body-name: body
      security:
        - BearerAuth: []
      requestBody:
        description: Update Users Roles Request
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRoleRequest'
            examples:
              valid:
                value:
                  usernames:
                    - john
                    - jean
                  roleNames:
                    - USER 
                    - ADMIN
              bad-request:
                value:
                  usernames: null
                  roleNames: null
      responses:
        204:
          description: Update Users Roles Success
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: 18-10-2021 04:00:44
                status: 400
                error: Bad Request
                errors:
                  - domain: usernames
                    message: Usernames not provided.
                  - domain: usernames
                    message: Roles not provided.
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: 18-10-2021 04:00:44
                status: 401
                error: Unauthorized
                errors:
                  - domain: auth
                    message: Unauthorized.
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: 18-10-2021 04:00:44
                status: 403
                error: Forbidden
                errors:
                  - domain: auth
                    message: Forbidden.
  /admin/users/delete:
    delete:
      tags:
        - admin
      summary: Delete Users
      operationId: deleteUsers
      x-codegen-request-body-name: body
      security:
        - BearerAuth: []
      requestBody:
        description: Delete Users Request
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminRequest'
            examples:
              valid:
                value:
                  usernames:
                    - john
                    - jean
              bad-request:
                value:
                  usernames: null
      responses:
        204:
          description: Delete Users Success
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: 18-10-2021 04:00:44
                status: 400
                error: Bad Request
                errors:
                  - domain: usernames
                    message: Usernames not provided.
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: 18-10-2021 04:00:44
                status: 401
                error: Unauthorized
                errors:
                  - domain: auth
                    message: Unauthorized.
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                timestamp: 18-10-2021 04:00:44
                status: 403
                error: Forbidden
                errors:
                  - domain: auth
                    message: Forbidden.
components:
  schemas:
    SignUpRequest:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
        confirmPassword:
          type: string
    ConfirmRegistrationRequest:
      type: object
      properties:
        accessToken:
          type: string
          format: JWT
    ResendConfirmationEmailRequest:
      type: object
      properties:
        usernameOrEmail:
          type: string
    SignInRequest:
      type: object
      properties:
        usernameOrEmail:
          type: string
        password:
          type: string
    RefreshTokenRequest:
      type: object
      properties:
        refreshToken:
          type: string
          format: JWT
    ForgotPasswordRequest:
      type: object
      properties:
        email:
          type: string
          format: email
    ResetPasswordRequest:
      type: object
      properties:
        accessToken:
          type: string
          format: JWT
        password:
          type: string
        confirmPassword:
          type: string
    UpdateProfileRequest:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        username:
          type: string
        email:
          type: string
          format: email
    ChangePasswordRequest:
      type: object
      properties:
        oldPassword:
          type: string
        newPassword:
          type: string
        confirmNewPassword:
          type: string
    AdminRequest:
      type: object
      properties:
        usernames:
          type: array
          items:
            type: string
    UpdateRoleRequest:
      type: object
      properties:
        usernames:
          type: array
          items:
            type: string
        roleNames:
          type: array
          items:
            type: string
            enum:
              - USER
              - ADMIN
    RoleResponse:
      type: object
      properties:
        name:
          type: string
          enum:
            - USER
            - ADMIN
    UserResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
        username:
          type: string
        email:
          type: string
          format: email
        activated:
          type: boolean
        nonLocked:
          type: boolean
        roles:
          type: array
          items:
            $ref: '#/components/schemas/RoleResponse'
    SignInResponse:
      type: object
      properties:
        accessToken:
          type: string
          format: JWT
        refreshToken:
          type: string
          format: JWT
        user:
          $ref: '#/components/schemas/UserResponse'
    RefreshTokenResponse:
      properties:
        accessToken:
          type: string
          format: JWT
        refreshToken:
          type: string
          format: JWT
    ErrorResponse:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        status:
          type: integer
          format: int32
        error:
          type: string
        errors:
          type: array
          items:
            type: object
            properties:
              domain:
                type: string
              message:
                type: string
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
