openapi: 3.0.3
info:
  title: BootstrapBugZ
  description: Description
  termsOfService: https://swagger.io/terms/
  contact:
    email: dejan.zdravkovic@protonmail.com
  license:
    name: MIT License
    url: https://choosealicense.com/licenses/mit/
  version: 1.0.0
servers:
  - url: http://localhost:8080/v1
  - url: https://localhost:8080/v1
  - url: http://localhost:8081/v1
  - url: https://localhost:8081/v1
tags:
  - name: auth
    description: Authentication endpoints
  - name: profile
    description: Profile endpoints
  - name: users
    description: Users endpoints
  - name: admin
    description: Admin endpoints
paths:
  /auth/register:
    post:
      tags:
        - auth
      summary: User registration
      requestBody:
        $ref: "#/components/requestBodies/RegisterUserRequest"
      responses:
        201:
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDTO"
              example:
                id: 5
                firstName: John
                lastName: Doe
                username: john.doe
                email: john.doe@localhost
                createdAt: 2023-05-18T00:51:50.758738
        400:
          $ref: "#/components/responses/BadRequest"
        409:
          $ref: "#/components/responses/Conflict"
  /auth/tokens:
    post:
      tags:
        - auth
      summary: Create access and refresh tokens
      requestBody:
        $ref: "#/components/requestBodies/AuthTokenRequest"
      responses:
        200:
          description: Auth tokens created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthTokensDTO"
              example:
                accessToken: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJyb2xlcyI6WyJVU0VSIl0sImlzc3VlZEF0IjoiMjAyMS0xMC0yMFQxNDozMzo0NC43MDcyOTMzMDlaIiwiZXhwIjoxNjM0NzQxMzI0LCJ1c2VySWQiOjJ9.uXOVA1q-o2DtHmwBAzEfqEm8GLpAhXrYo0rlZ_6NFbBGILhkV74x-Iu9W2uSfSlwp1IfKPCHlR6zWVPvAbhWVw
                refreshToken: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJyb2xlcyI6WyJVU0VSIl0sImlzc3VlZEF0IjoiMjAyMS0xMC0xOVQxMzowMDowMy45MDYzNDQyMDJaIiwiZXhwIjoxNjM1MjUzMjAzLCJ1c2VySWQiOjJ9.RHzh6qyGJEKYdvCuCF7wPoUGBSrDGeoY8dSTBhuv21Fzw_CPEa5KeI3MOYgSN3zA1o_ZlKwjHgpSsPM3xAO_DQ
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
    delete:
      tags:
        - auth
      summary: Delete access and refresh tokens
      security:
        - BearerAuth: []
      responses:
        204:
          description: Access and refresh tokens deleted successfully
  /auth/tokens/devices:
    delete:
      tags:
        - auth
      summary: Delete access and refresh tokens on all devices
      security:
        - BearerAuth: []
      responses:
        204:
          description: Access and refresh tokens deleted successfully on all devices
  /auth/tokens/refresh:
    post:
      tags:
        - auth
      summary: Refresh auth tokens
      requestBody:
        $ref: "#/components/requestBodies/RefreshAuthTokensRequest"
      responses:
        200:
          description: Auth tokens refreshed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthTokensDTO"
              example:
                accessToken: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJyb2xlcyI6WyJVU0VSIl0sImlzc3VlZEF0IjoiMjAyMS0xMC0yMFQxNDozMzo0NC43MDcyOTMzMDlaIiwiZXhwIjoxNjM0NzQxMzI0LCJ1c2VySWQiOjJ9.uXOVA1q-o2DtHmwBAzEfqEm8GLpAhXrYo0rlZ_6NFbBGILhkV74x-Iu9W2uSfSlwp1IfKPCHlR6zWVPvAbhWVw
                refreshToken: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJyb2xlcyI6WyJVU0VSIl0sImlzc3VlZEF0IjoiMjAyMS0xMC0xOVQxMzowMDowMy45MDYzNDQyMDJaIiwiZXhwIjoxNjM1MjUzMjAzLCJ1c2VySWQiOjJ9.RHzh6qyGJEKYdvCuCF7wPoUGBSrDGeoY8dSTBhuv21Fzw_CPEa5KeI3MOYgSN3zA1o_ZlKwjHgpSsPM3xAO_DQ
        400:
          $ref: "#/components/responses/BadRequest"
  /auth/password/forgot:
    post:
      tags:
        - auth
      summary: Send forgot password email
      requestBody:
        $ref: "#/components/requestBodies/ForgotPasswordRequest"
      responses:
        204:
          description: Forgot password email sent successfully
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
  /auth/password/reset:
    post:
      tags:
        - auth
      summary: Reset password
      requestBody:
        $ref: "#/components/requestBodies/ResetPasswordRequest"
      responses:
        204:
          description: Password reset successfully
        400:
          $ref: "#/components/responses/BadRequest"
  /auth/verification-email:
    post:
      tags:
        - auth
      summary: Send verification email
      requestBody:
        $ref: "#/components/requestBodies/VerificationEmailRequest"
      responses:
        204:
          description: Verification email sent successfully
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        409:
          $ref: "#/components/responses/Conflict"
  /auth/verify-email:
    post:
      tags:
        - auth
      summary: Verify email
      requestBody:
        $ref: "#/components/requestBodies/VerifyEmailRequest"
      responses:
        204:
          description: Email verified successfully
        400:
          $ref: "#/components/responses/BadRequest"
        409:
          $ref: "#/components/responses/Conflict"
  /profile:
    get:
      tags:
        - profile
      summary: Get profile
      security:
        - BearerAuth: []
      responses:
        200:
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDTO"
              example:
                id: 2
                firstName: User
                lastName: User
                username: user
                email: user@localhost
                createdAt: 2023-05-18T00:51:50.758738
        401:
          $ref: "#/components/responses/Unauthorized"
    patch:
      tags:
        - profile
      summary: Patch profile
      security:
        - BearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/PatchProfileRequest"
      responses:
        200:
          description: Profile patched successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDTO"
              example:
                id: 2
                firstName: John
                lastName: Doe
                username: john.doe
                email: john.doe@localhost
                createdAt: 2023-05-18T00:51:50.758738
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        409:
          $ref: "#/components/responses/Conflict"
    delete:
      tags:
        - profile
      summary: Delete profile
      security:
        - BearerAuth: []
      responses:
        204:
          description: Profile deleted successfully
        401:
          $ref: "#/components/responses/Unauthorized"
  /profile/password:
    patch:
      tags:
        - profile
      summary: Change profile password
      security:
        - BearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/ChangePasswordRequest"
      responses:
        204:
          description: Profile password changed successfully
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
  /users:
    get:
      tags:
        - users
      summary: Get users with pagination
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/limit"
      responses:
        200:
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                required:
                  - "data"
                  - "total"
                  - "page"
                  - "limit"
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/UserDTO"
                  total:
                    type: integer
                  page:
                    type: integer
                  limit:
                    type: integer
              example:
                data:
                  - id: 1
                    firstName: Admin
                    lastName: Admin
                    username: admin
                    email: null
                    createdAt: 2023-05-18T00:51:50.758738
                  - id: 2
                    firstName: User
                    lastName: User
                    username: user
                    email: null
                    createdAt: 2023-05-18T00:51:50.758738
                  - id: 3
                    firstName: John
                    lastName: Doe
                    username: john.doe
                    email: null
                    createdAt: 2023-05-18T00:51:50.758738
                total: 3
                page: 0
                limit: 10
  /users/{id}:
    get:
      tags:
        - users
      summary: Get user by id
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        200:
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDTO"
              example:
                id: 2
                firstName: User
                lastName: User
                username: user
                email: null
                createdAt: 2023-05-18T00:51:50.758738
        404:
          $ref: "#/components/responses/NotFound"
  /users/username/{username}:
    get:
      tags:
        - users
      summary: Get user by username
      parameters:
        - $ref: "#/components/parameters/username"
      responses:
        200:
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDTO"
              example:
                id: 2
                firstName: user
                lastName: user
                username: user
                email: null
                createdAt: 2023-05-18T00:51:50.758738
        404:
          $ref: "#/components/responses/NotFound"
  /users/username/availability:
    post:
      tags:
        - users
      summary: Check username availability
      requestBody:
        $ref: "#/components/requestBodies/UsernameAvailabilityRequest"
      responses:
        200:
          description: Username availability checked successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AvailabilityDTO"
              example:
                available: true
        400:
          $ref: "#/components/responses/BadRequest"
  /users/email/availability:
    post:
      tags:
        - users
      summary: Check email availability
      requestBody:
        $ref: "#/components/requestBodies/EmailAvailabilityRequest"
      responses:
        200:
          description: Email availability checked successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AvailabilityDTO"
              example:
                available: true
        400:
          $ref: "#/components/responses/BadRequest"
  /admin/users:
    post:
      tags:
        - admin
      summary: Create user
      security:
        - BearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/UserRequest"
      responses:
        201:
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDTO"
              example:
                id: 5
                firstName: John
                lastName: Doe
                username: john.doe
                email: john.doe@localhost
                active: true
                lock: false
                createdAt: 2023-05-18T00:51:50.758738
                roles:
                  - name: USER
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        409:
          $ref: "#/components/responses/Conflict"
    get:
      tags:
        - admin
      summary: Get users with pagination
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/limit"
      responses:
        200:
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                required:
                  - "data"
                  - "total"
                  - "page"
                  - "limit"
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/UserDTO"
                  total:
                    type: integer
                  page:
                    type: integer
                  limit:
                    type: integer
                example:
                  data:
                    - id: 1
                      firstName: Admin
                      lastName: Admin
                      username: admin
                      email: admin@localhost
                      active: true
                      lock: false
                      createdAt: 2023-05-18T00:51:50.758738
                      roles:
                        - name: USER
                        - name: ADMIN
                    - id: 2
                      firstName: User
                      lastName: User
                      username: user
                      email: user@localhost
                      active: true
                      lock: false
                      createdAt: 2023-05-18T00:51:50.758738
                      roles:
                        - name: USER
                    - id: 3
                      firstName: John
                      lastName: Doe
                      username: john.doe
                      email: john.doe@localhost
                      active: true
                      lock: false
                      createdAt: 2023-05-18T00:51:50.758738
                      roles:
                        - name: USER
                  total: 3
                  page: 0
                  limit: 10
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
  /admin/users/{id}:
    get:
      tags:
        - admin
      summary: Get user by id
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        200:
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDTO"
              example:
                id: 2
                firstName: User
                lastName: User
                username: user
                email: user@localhost
                active: true
                lock: false
                createdAt: 2023-05-18T00:51:50.758738
                roles:
                  - name: USER
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
    put:
      tags:
        - admin
      summary: Update user by id
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        $ref: "#/components/requestBodies/UserRequest"
      responses:
        200:
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDTO"
              example:
                id: 2
                firstName: John
                lastName: Doe
                username: john.doe
                email: john.doe@localhost
                active: true
                lock: false
                createdAt: 2023-05-18T00:51:50.758738
                roles:
                  - name: USER
                  - name: ADMIN
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        409:
          $ref: "#/components/responses/Conflict"
    patch:
      tags:
        - admin
      summary: Patch user by id
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        $ref: "#/components/requestBodies/PatchUserRequest"
      responses:
        200:
          description: User patched successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDTO"
              example:
                id: 2
                firstName: John
                lastName: Doe
                username: john.doe
                email: john.doe@localhost
                active: true
                lock: false
                createdAt: 2023-05-18T00:51:50.758738
                roles:
                  - name: USER
                  - name: ADMIN
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          $ref: "#/components/responses/NotFound"
        409:
          $ref: "#/components/responses/Conflict"
    delete:
      tags:
        - admin
      summary: Delete user by id
      security:
        - BearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        204:
          description: User deleted successfully
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
components:
  responses:
    BadRequest:
      description: Bad Request
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/ErrorMessage"
          example:
            timestamp: 2023-05-18T00:51:50.758738
            status: 400
            error: Bad Request
            details:
              - field: field1
                message: Invalid field1.
              - field: field2
                message: Invalid field2.
    Unauthorized:
      description: Unauthorized
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/ErrorMessage"
          example:
            timestamp: 2023-05-18T00:51:50.758738
            status: 401
            error: Unauthorized
            details:
              - message: Unauthorized.
    Forbidden:
      description: Forbidden
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/ErrorMessage"
          example:
            timestamp: 2023-05-18T00:51:50.758738
            status: 403
            error: Forbidden
            details:
              - message: Forbidden.
    NotFound:
      description: Not Found
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/ErrorMessage"
          example:
            timestamp: 2023-05-18T00:51:50.758738
            status: 404
            error: Not Found
            details:
              - message: Resource Not Found.
    Conflict:
      description: Conflict
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/ErrorMessage"
          example:
            timestamp: 2023-05-18T00:51:50.758738
            status: 409
            error: Conflict
            details:
              - field: field
                message: Conflict.
  parameters:
    id:
      name: id
      in: path
      description: Resource id
      required: true
      schema:
        type: number
      example: 2
    username:
      name: username
      in: path
      description: Username
      required: true
      schema:
        type: string
      example: user
    page:
      name: page
      in: query
      description: Page number
      required: false
      schema:
        type: integer
        default: 0
    limit:
      name: limit
      in: query
      description: Number of items per page
      required: false
      schema:
        type: integer
        default: 10
  requestBodies:
    RegisterUserRequest:
      description: Register user request
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - firstName
              - lastName
              - username
              - email
              - password
              - confirmPassword
            properties:
              firstName:
                type: string
              lastName:
                type: string
              username:
                type: string
              email:
                type: string
                format: email
              password:
                type: string
              confirmPassword:
                type: string
          example:
            firstName: John
            lastName: Doe
            username: John.doe
            email: john.doe@localhost
            password: qwerty123
            confirmPassword: qwerty123
    AuthTokenRequest:
      description: Auth token request
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - usernameOrEmail
              - password
            properties:
              usernameOrEmail:
                type: string
              password:
                type: string
          example:
            usernameOrEmail: user
            password: qwerty123
    RefreshAuthTokensRequest:
      description: Refresh auth tokens request
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - refreshToken
            properties:
              refreshToken:
                type: string
                format: JWT
          example:
            refreshToken: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJyb2xlcyI6WyJVU0VSIl0sImlzc3VlZEF0IjoiMjAyMS0xMC0xOVQxMzowMDowMy45MDYzNDQyMDJaIiwiZXhwIjoxNjM1MjUzMjAzLCJ1c2VySWQiOjJ9.RHzh6qyGJEKYdvCuCF7wPoUGBSrDGeoY8dSTBhuv21Fzw_CPEa5KeI3MOYgSN3zA1o_ZlKwjHgpSsPM3xAO_DQ
    ForgotPasswordRequest:
      description: Forgot password request
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - email
            properties:
              email:
                type: string
                format: email
          example:
            email: user@localhost
    ResetPasswordRequest:
      description: Reset password request
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - token
              - password
              - confirmPassword
            properties:
              token:
                type: string
                format: JWT
              password:
                type: string
              confirmPassword:
                type: string
          example:
            token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJyb2xlcyI6WyJVU0VSIl0sImlzc3VlZEF0IjoiMjAyMS0xMC0yMFQxNDozMzo0NC43MDcyOTMzMDlaIiwiZXhwIjoxNjM0NzQxMzI0LCJ1c2VySWQiOjJ9.uXOVA1q-o2DtHmwBAzEfqEm8GLpAhXrYo0rlZ_6NFbBGILhkV74x-Iu9W2uSfSlwp1IfKPCHlR6zWVPvAbhWVw
            password: qwerty321
            confirmPassword: qwerty321
    VerificationEmailRequest:
      description: Verification email request
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - usernameOrEmail
            properties:
              usernameOrEmail:
                type: string
          example:
            usernameOrEmail: user@localhost
    VerifyEmailRequest:
      description: Verify email request
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - token
            properties:
              token:
                type: string
                format: JWT
          example:
            token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJyb2xlcyI6WyJVU0VSIl0sImlzc3VlZEF0IjoiMjAyMS0xMC0yMFQxNDozMzo0NC43MDcyOTMzMDlaIiwiZXhwIjoxNjM0NzQxMzI0LCJ1c2VySWQiOjJ9.uXOVA1q-o2DtHmwBAzEfqEm8GLpAhXrYo0rlZ_6NFbBGILhkV74x-Iu9W2uSfSlwp1IfKPCHlR6zWVPvAbhWVw
    PatchProfileRequest:
      description: Patch profile request
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              firstName:
                type: string
              lastName:
                type: string
              username:
                type: string
              email:
                type: string
                format: email
          example:
            firstName: John
            lastName: Doe
            username: John.doe
            email: john.doe@localhost
    ChangePasswordRequest:
      description: Change password request
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - currentPassword
              - newPassword
              - confirmNewPassword
            properties:
              currentPassword:
                type: string
              newPassword:
                type: string
              confirmNewPassword:
                type: string
          example:
            currentPassword: qwerty123
            newPassword: qwerty321
            confirmNewPassword: qwerty321
    UserRequest:
      description: User request
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - firstName
              - lastName
              - username
              - email
              - password
              - confirmPassword
              - active
              - lock
              - roleNames
            properties:
              firstName:
                type: string
              lastName:
                type: string
              username:
                type: string
              email:
                type: string
                format: email
              password:
                type: string
              confirmPassword:
                type: string
              active:
                type: boolean
              lock:
                type: boolean
              roleNames:
                type: array
                items:
                  type: string
                  enum:
                    - USER
                    - ADMIN
          example:
            firstName: John
            lastName: Doe
            username: John.doe
            email: john.doe@localhost
            password: qwerty123
            confirmPassword: qwerty123
            active: true
            lock: false
            roleNames:
              - USER
    PatchUserRequest:
      description: Patch user request
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              firstName:
                type: string
              lastName:
                type: string
              username:
                type: string
              email:
                type: string
                format: email
              password:
                type: string
              confirmPassword:
                type: string
              active:
                type: boolean
              lock:
                type: boolean
              roleNames:
                type: array
                items:
                  type: string
                  enum:
                    - USER
                    - ADMIN
          example:
            firstName: John
            lastName: Doe
            username: John.doe
            email: john.doe@localhost
            active: true
            password: qwerty123
            confirmPassword: qwerty123
            lock: false
            roleNames:
              - USER
    UsernameAvailabilityRequest:
      description: Username availability request
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - username
            properties:
              username:
                type: string
          example:
            username: user
    EmailAvailabilityRequest:
      description: Email availability request
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - email
            properties:
              email:
                type: string
                format: email
          example:
            email: user@localhost
  schemas:
    AuthTokensDTO:
      type: object
      required:
        - accessToken
        - refreshToken
      properties:
        accessToken:
          type: string
          format: JWT
        refreshToken:
          type: string
          format: JWT
    RoleDTO:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          enum:
            - USER
            - ADMIN
    UserDTO:
      type: object
      required:
        - id
        - firstName
        - lastName
        - username
        - email
        - createdAt
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
        username:
          type: string
        email:
          type: string
          format: email
          nullable: true
        active:
          type: boolean
        lock:
          type: boolean
        createdAt:
          type: string
          format: date-time
        roles:
          type: array
          items:
            $ref: "#/components/schemas/RoleDTO"
    AvailabilityDTO:
      type: object
      required:
        - available
      properties:
        available:
          type: boolean
    ErrorMessage:
      type: object
      required:
        - timestamp
        - status
        - error
        - details
      properties:
        timestamp:
          type: string
          format: date-time
        status:
          type: integer
          format: int32
        error:
          type: string
        details:
          type: array
          items:
            type: object
            required:
              - message
            properties:
              field:
                type: string
                nullable: true
              message:
                type: string
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
